// Code generated by MockGen. DO NOT EDIT.
// Source: ./spec.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shared "github.com/surasithaof/sse/shared"
)

// MockSSEServer is a mock of SSEServer interface.
type MockSSEServer struct {
	ctrl     *gomock.Controller
	recorder *MockSSEServerMockRecorder
}

// MockSSEServerMockRecorder is the mock recorder for MockSSEServer.
type MockSSEServerMockRecorder struct {
	mock *MockSSEServer
}

// NewMockSSEServer creates a new mock instance.
func NewMockSSEServer(ctrl *gomock.Controller) *MockSSEServer {
	mock := &MockSSEServer{ctrl: ctrl}
	mock.recorder = &MockSSEServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSEServer) EXPECT() *MockSSEServerMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockSSEServer) Broadcast(event shared.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", event)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockSSEServerMockRecorder) Broadcast(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockSSEServer)(nil).Broadcast), event)
}

// Listen mocks base method.
func (m *MockSSEServer) Listen(rw http.ResponseWriter, req *http.Request, connectionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Listen", rw, req, connectionID)
}

// Listen indicates an expected call of Listen.
func (mr *MockSSEServerMockRecorder) Listen(rw, req, connectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockSSEServer)(nil).Listen), rw, req, connectionID)
}

// SendMessage mocks base method.
func (m *MockSSEServer) SendMessage(connectionID string, event shared.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", connectionID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSSEServerMockRecorder) SendMessage(connectionID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSSEServer)(nil).SendMessage), connectionID, event)
}
